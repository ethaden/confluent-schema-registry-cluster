---
services:
  cp-schema-registry-faketime:
    image: cp-schema-registry-faketime:${CP_VERSION}
    build:
      context: .
      dockerfile: Dockerfile
      args:
        CP_VERSION: ${CP_VERSION}
    networks:
      - kafka
  broker1:
    image: confluentinc/cp-server:${CP_VERSION}
    hostname: broker1
    container_name: broker1
    networks:
      - kafka
    ports:
      - "9092:29092"
      - "9101:9101"
    healthcheck:
      test: [ "CMD", "nc", "-z", "broker1", "9092" ]
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker1:9092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker1:9093,2@broker2:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker1:9092,CONTROLLER://broker1:9093,PLAINTEXT_HOST://0.0.0.0:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: "false"
      # BEGIN MAYBE REQUIRED
      #KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      #KAFKA_CONFLUENT_TELEMETRY_ENABLED: 'false'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_CONFLUENT_BALANCER_ENABLE: "false"
      #CONFLUENT_METRICS_ENABLE: "false"
      # END MAYBE REQUIRED
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICA: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 12
      KAFKA_LOG_SEGMENT_BYTES: 1048576 #1Mb
      KAFKA_LOG_RETENTION_BYTES: 134217728 #128Mb
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "broker1:9092"

  broker2:
    image: confluentinc/cp-server:${CP_VERSION}
    hostname: broker2
    container_name: broker2
    networks:
      - kafka
    ports:
      - "19092:29092"
      - "19101:9101"
    healthcheck:
      test: [ "CMD", "nc", "-z", "broker2", "9092" ]
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker2:9092,PLAINTEXT_HOST://localhost:19092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker1:9093,2@broker2:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker2:9092,CONTROLLER://broker2:9093,PLAINTEXT_HOST://0.0.0.0:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: "false"
      # BEGIN MAYBE REQUIRED
      #KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      #KAFKA_CONFLUENT_TELEMETRY_ENABLED: 'false'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_CONFLUENT_BALANCER_ENABLE: "false"
      #CONFLUENT_METRICS_ENABLE: "false"
      # END MAYBE REQUIRED
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICA: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 12
      KAFKA_LOG_SEGMENT_BYTES: 1048576 #1Mb
      KAFKA_LOG_RETENTION_BYTES: 134217728 #128Mb
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "broker1:9092"

  schema-registry:
    image: cp-schema-registry-faketime:${CP_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      cp-schema-registry-faketime:
        condition: service_started
    volumes:
      - ./config/schema_registry_jaas_config.conf:/etc/schema-registry/schema_registry_jaas_config.conf
      - ./config/schema_registry_password_file:/etc/schema-registry/schema_registry_password_file
    networks:
      - kafka
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD", "curl", "http://schema-registry:8081" ]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: schema-registry
      # This instance can be the leader
      SCHEMA_REGISTRY_LEADER_ELIGIBILITY: true
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:9092'
      SCHEMA_REGISTRY_KAFKASTORE_REPLICATION_FACTOR: 2
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      # For testing authentication/authorization and license handling, enable the following lines
      SCHEMA_REGISTRY_RESOURCE_EXTENSION_CLASS: io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension
      SCHEMA_REGISTRY_CONFLUENT_SCHEMA_REGISTRY_AUTHORIZER_CLASS: io.confluent.kafka.schemaregistry.security.authorizer.schemaregistryacl.SchemaRegistryAclAuthorizer
      SCHEMA_REGISTRY_AUTHENTICATION_METHOD: BASIC
      SCHEMA_REGISTRY_AUTHENTICATION_REALM: SchemaRegistry
      SCHEMA_REGISTRY_AUTHENTICATION_ROLES: admin,user
      SCHEMA_REGISTRY_CONFLUENT_SCHEMA_REGISTRY_AUTH_MECHANISM: JETTY_AUTH
      SCHEMA_REGISTRY_OPTS: -Djava.security.auth.login.config=/etc/schema-registry/schema_registry_jaas_config.conf
      # For setting the license, enable the following line:
      #SCHEMA_REGISTRY_CONFLUENT_LICENSE: <Add YOUR LICENSE HERE>
      # The following lines allow manipulating the date/time in the container
      LD_PRELOAD: ""
      #FAKETIME: +30d

  schema-registry2:
    #image: cp-schema-registry-faketime:${CP_VERSION}
    image: confluentinc/cp-schema-registry:${CP_VERSION}
    hostname: schema-registry2
    container_name: schema-registry2
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      cp-schema-registry-faketime:
        condition: service_started
      schema-registry:
        condition: service_healthy
    volumes:
      - ./config/schema_registry_jaas_config.conf:/etc/schema-registry/schema_registry_jaas_config.conf
      - ./config/schema_registry_password_file:/etc/schema-registry/schema_registry_password_file
    networks:
      - kafka
    ports:
      - "18081:8081"
    healthcheck:
      test: [ "CMD", "curl", "http://schema-registry2:8081" ]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry2
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: schema-registry
      # This instance will never be the leader
      SCHEMA_REGISTRY_LEADER_ELIGIBILITY: false
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:9092'
      SCHEMA_REGISTRY_KAFKASTORE_REPLICATION_FACTOR: 2
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      # For testing authentication/authorization and license handling, enable the following lines
      SCHEMA_REGISTRY_RESOURCE_EXTENSION_CLASS: io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension
      SCHEMA_REGISTRY_CONFLUENT_SCHEMA_REGISTRY_AUTHORIZER_CLASS: io.confluent.kafka.schemaregistry.security.authorizer.schemaregistryacl.SchemaRegistryAclAuthorizer
      SCHEMA_REGISTRY_AUTHENTICATION_METHOD: BASIC
      SCHEMA_REGISTRY_AUTHENTICATION_REALM: SchemaRegistry
      SCHEMA_REGISTRY_AUTHENTICATION_ROLES: admin,user
      SCHEMA_REGISTRY_CONFLUENT_SCHEMA_REGISTRY_AUTH_MECHANISM: JETTY_AUTH
      SCHEMA_REGISTRY_OPTS: -Djava.security.auth.login.config=/etc/schema-registry/schema_registry_jaas_config.conf
      # For setting the license, enable the following line:
      #SCHEMA_REGISTRY_CONFLUENT_LICENSE: <Add YOUR LICENSE HERE>
      # The following lines allow manipulating the date/time in the container
      LD_PRELOAD: ""
      #FAKETIME: +30d
  schema-registry3:
    image: cp-schema-registry-faketime:${CP_VERSION}
    hostname: schema-registry3
    container_name: schema-registry3
    profiles:
      - IndependentSchemaRegistry
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      cp-schema-registry-faketime:
        condition: service_started
      # Here, we make this actual independent instance wait for the other instances just to ensure that it is the one which fails while not being configured properly
      # Otherwise, it wouldn't be clear which instance fails (race condition)
      schema-registry:
        condition: service_healthy
      schema-registry2:
        condition: service_healthy
    volumes:
      - ./config/schema_registry_jaas_config.conf:/etc/schema-registry/schema_registry_jaas_config.conf
      - ./config/schema_registry_password_file:/etc/schema-registry/schema_registry_password_file
    networks:
      - kafka
    ports:
      - "28081:8081"
    healthcheck:
      test: [ "CMD", "curl", "http://schema-registry3:8081" ]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry3
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: independent-second-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:9092'
      SCHEMA_REGISTRY_KAFKASTORE_REPLICATION_FACTOR: 1
      #SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas_independent_schema_registry
      #SCHEMA_REGISTRY_CONFLUENT_SCHEMA_REGISTRY_ACL_TOPIC: _schemas_acl_independent_schema_registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      # For testing authentication/authorization and license handling, enable the following lines
      SCHEMA_REGISTRY_RESOURCE_EXTENSION_CLASS: io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension
      SCHEMA_REGISTRY_CONFLUENT_SCHEMA_REGISTRY_AUTHORIZER_CLASS: io.confluent.kafka.schemaregistry.security.authorizer.schemaregistryacl.SchemaRegistryAclAuthorizer
      SCHEMA_REGISTRY_AUTHENTICATION_METHOD: BASIC
      SCHEMA_REGISTRY_AUTHENTICATION_REALM: SchemaRegistry
      SCHEMA_REGISTRY_AUTHENTICATION_ROLES: admin,user
      SCHEMA_REGISTRY_CONFLUENT_SCHEMA_REGISTRY_AUTH_MECHANISM: JETTY_AUTH
      SCHEMA_REGISTRY_OPTS: -Djava.security.auth.login.config=/etc/schema-registry/schema_registry_jaas_config.conf
      # For setting the license, enable the following line:
      #SCHEMA_REGISTRY_CONFLUENT_LICENSE: <Add YOUR LICENSE HERE>
      # The following lines allow manipulating the date/time in the container
      LD_PRELOAD: ""
      #FAKETIME: +30d
  control-center:
    image: confluentinc/cp-enterprise-control-center:${CP_VERSION}
    hostname: control-center
    container_name: control-center
    profiles:
      - controlcenter
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker1:9092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

networks:
  kafka:
